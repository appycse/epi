#+TITLE: Elements of Programming Interviews: Solutions
#+AUTHOR: Jonathan Jin
#+STARTUP: logdone showall

* Table of Contents                                                  :TOC:TOC_3:
- [[#data-structures-and-algorithms][Data Structures and Algorithms]]
  - [[#primitive-types][Primitive Types]]
    - [[#computing-the-parity-of-a-word][Computing the parity of a word]]
  - [[#arrays][Arrays]]
  - [[#strings][Strings]]
  - [[#linked-lists][Linked Lists]]
  - [[#stacks-and-queues][Stacks and Queues]]
    - [[#implement-a-stack-with-max-api][Implement a stack with =max= API]]
  - [[#binary-trees][Binary Trees]]
  - [[#heaps][Heaps]]
  - [[#searching][Searching]]
  - [[#hash-tables][Hash Tables]]
  - [[#sorting][Sorting]]
  - [[#binary-search-trees][Binary Search Trees]]
  - [[#recursion][Recursion]]
  - [[#dynamic-programming][Dynamic Programming]]
  - [[#greedy-algorithms-and-invariants][Greedy Algorithms and Invariants]]
  - [[#graphs][Graphs]]
  - [[#parallel-computing][Parallel Computing]]
- [[#domain-specific-problems][Domain Specific Problems]]
  - [[#design-problems][Design Problems]]
  - [[#language-questions][Language Questions]]
  - [[#object-oriented-design][Object-Oriented Design]]
  - [[#common-tools][Common Tools]]
- [[#honors-class][Honors Class]]
- [[#unlicense][(Un)license]]

* Data Structures and Algorithms

** Primitive Types

*** DONE Computing the parity of a word
    CLOSED: [2017-06-21 Wed 00:44]
    
    The parity of a binary word is 1 if the number of 1s in the word is odd;
    otherwise, it is 0. For example, the parity of 1011 is 1, and the parity of
    10001000 is 0. Parity checks are used to detect single bit errors in data
    storage and communication. It is fairly straightforward to write code that
    computes the parity of a single 64-bit word
    
**** Solution

     We assume that the word is provided as a 64-bit unsigned integer.

     A naive implementation would be to iterate through every bit of the word,
     XOR-ing a counter for every 1-bit.

     #+BEGIN_SRC python :results silent :session
       def parity(word):
           p = 0
           for shift in range(0,64):
               p ^= (word>>shift)&1
           return p
     #+END_SRC

     #+BEGIN_SRC python :results value :session
       all([parity(int(w,2))==p for w,p in [
           ("1011", 1),
           ("0000", 0),
       ]])
     #+END_SRC

     #+RESULTS:
     : True

     This implementation is O(n), where n is the length of the input word.

     We can, however, optimize this function further by precomputing the
     parities of words and storing the parities in a lookup table. For
     illustration's purpose, we'll define a lookup table that stores the
     parities of all words of length 2:

     #+BEGIN_SRC python :results none :session
       PARITIES_2 = {
           int(w,2): p for w,p in [
               ("00", 0),
               ("01", 1),
               ("10", 1),
               ("11", 0),
           ]
       }
     #+END_SRC

     Resulting in the following implementation:

     #+BEGIN_SRC python :results none :session
       def memoized_parity(word):
           p = 0
           memo_word_length = 2
           for s in range(0,64/memo_word_length):
               mask = 2^memo_word_length - 1
               shift = s * memo_word_length
               p ^= PARITIES_2[(word >> shift) & mask]
           return p
     #+END_SRC

     #+BEGIN_SRC python :results value :session
       all([memoized_parity(int(w,2))==p for w,p in [
           ("1011", 1),
           ("0000", 0),
       ]])
     #+END_SRC

     #+RESULTS:
     : True

     This revised implementation is O(n/w) = O(n), where w is the word length of
     the lookup key.
     
** Arrays
   
** Strings
   
** Linked Lists
   
** Stacks and Queues
   
*** DONE Implement a stack with =max= API
    CLOSED: [2017-06-21 Wed 01:06]

    Design a stack that includes a max operation, in addition to push and
    pop. The max method should return the maximum value stored in the stack.
    
**** Solution

     We can use an augmentation of a "vanilla" stack for this purpose. Each
     element of this augmented stack -- call it a "max stack" -- will maintain a
     record of the maximum value at or below its current level. This will allow
     us to preserve the following invariant for given max-stack =S=:

     #+BEGIN_VERBATIM
     S.head.max = max(S)
     #+END_VERBATIM

     We can implement the max-stack as follows:

     #+BEGIN_SRC python :results silent :session
       class MaxStack():
           def __init__(self, *args):
               self.record = []
               for v in args:
                   self.push(v)
           def push(self, v):
               if not self.record:
                   self.record.append((v,v))
               else:
                   self.record.append((v,max(v,self.record[-1][1])))
               return self
           def pop(self):
               if not self.record:
                   return None
               out = self.record[-1][0]
               self.record = self.record[0:-1]
               return out
           # drop silently pops 
           def drop(self):
               self.pop()
               return self
           def max(self):
               if not self.record:
                   return None
               return self.record[-1][1]
     #+END_SRC

     #+BEGIN_SRC python :results value :session
       all([
           MaxStack(1,4,3,2,5).max() == 5,
           MaxStack(1,4,3,2,5).drop().max() == 4,
           MaxStack(2,3,4,1).drop().drop().max() == 3,
       ])
     #+END_SRC

     #+RESULTS:
     : True

     This implementation is:

     - O(1) for push;
     - O(1) for pop;
     - O(1) for max lookup.


     Space complexity is O(2n) = O(n), where n is the stack size.
     
** Binary Trees
   
** Heaps
   
** Searching
   
** Hash Tables
   
** Sorting
   
** Binary Search Trees
   
** Recursion
   
** Dynamic Programming
   
** Greedy Algorithms and Invariants
   
** Graphs
   
** Parallel Computing
   
* Domain Specific Problems
  
** Design Problems
   
** Language Questions
   
** Object-Oriented Design
   
** Common Tools
   
* Honors Class
  
* (Un)license
  
  #+BEGIN_SRC text :eval never
    This is free and unencumbered software released into the public domain.

    Anyone is free to copy, modify, publish, use, compile, sell, or
    distribute this software, either in source code form or as a compiled
    binary, for any purpose, commercial or non-commercial, and by any
    means.

    In jurisdictions that recognize copyright laws, the author or authors
    of this software dedicate any and all copyright interest in the
    software to the public domain. We make this dedication for the benefit
    of the public at large and to the detriment of our heirs and
    successors. We intend this dedication to be an overt act of
    relinquishment in perpetuity of all present and future rights to this
    software under copyright law.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

    For more information, please refer to <http://unlicense.org>
  #+END_SRC
